import datetime
import json
import logging

from pydantic import constr
from dataclasses import dataclass, asdict, field
from .enums import SummarizationStatus, TaggingStatus, AggregatorPlatform


""" Classes for the structured fields and subfields within the AlertDocument class. """
@dataclass
class SummarizationInfo:
    """
    SummarizationInfo holds the summarization details of an alert, including
    the summarization status and the summary text if available.
    
    Attributes:
        status: The current status of the summarization process as an enumeration.
        summary_text: The summarized text of the alert, if available.
    """
    status: SummarizationStatus = SummarizationStatus.NOT_STARTED
    summary_text: str | None = None

@dataclass
class TagsInfo:
    """
    TagsInfo holds the tagging details of an alert, including
    the current status of the tagging process and a list of associated tags.
    
    Attributes:
        status: The current status of the tagging process as an enumeration.
        tags: A list of tags associated with the alert.
    """
    status: TaggingStatus = TaggingStatus.NOT_TAGGED
    tags: list[str] | None = None


# The main AlertDocument class that will hold the data and above typed fields.
@dataclass
class AlertDocument:
    """
    AlertDocument defines the schema for storing all metadata related to an alert.
    This structure serves as the single source of truth for alert data, continuously
    synchronized with the data processing pipeline.

    Attributes:
        id: A unique identifier for each alert, initialised by the database.
        aggregatorPlatform: The platform or service where the data was aggregated.
        publicationSourceUrl: 
            The URL of the original publication source. 
            Either the 'canonicalUrl', or the 'alternate.href' field from the alert data.
            See https://developers.feedly.com/reference/articlejson for details.
        alertData: A dictionary containing the raw data of the alert from the aggregation platform.
        summaryData: An instance of SummarizationInfo containing summarization details.
        tagsData: A dictionary containing the tags associated with the alert.
    """
    aggregator_platform: AggregatorPlatform
    publication_source_url: str
    publication_datetime: int | str # Unix timestamp
    alert_data: dict # Using Dict to store raw, unstructured data. # ToDo: Don't enforce a schema here. Just store the raw data.
    summary_data: SummarizationInfo = field(default_factory=SummarizationInfo)
    tags_data: TagsInfo = field(default_factory=TagsInfo)
    id: str = '' # Initialise empty as generated by the db.

    def __post_init__(self):
        timestamp_ms = self.publication_datetime
        timestamp_s = timestamp_ms / 1000
        dt = datetime.datetime.fromtimestamp(timestamp_s)
        dt_str = dt.strftime('%Y-%m-%d %H:%M:%S')
        self.publication_datetime = dt_str


    def to_dict(self, without_id: bool = False):
        """
        Convert the dataclass instance to a dictionary.
        Exclude 'id' field in order to get the db to auto-generate it.

        Args:
            without_id: A boolean flag to exclude the 'id' field from dict.
        """
        try:
            alert_dict = asdict(self)
        except Exception as e:
            logging.error(f"Error converting AlertDocument to dict: {e}")
            raise type(e)(f"Error converting AlertDocument to dict: {e}").with_traceback(e.__traceback__)
        
        if without_id:
            if 'id' in alert_dict:
                del alert_dict['id']
        
        return alert_dict
        

        

# ToDo: Think this is a great use-case for subclassing.
# Make different fields etc for Feedly and other etc. Only if they actually have different needs in the end though.
